let x = 2;
const y = 2;

x = 4;
y = 4; // const이기 때문에 재할당 재변형 불가능

document.write(x);
document.write(y);

/**
 * var 키워드의 문제점은 크게 세 가지가 존재한다.

    변수 중복 선언 가능하여, 예기치 못한 값을 반환할 수 있다.
    함수 레벨 스코프로 인해 함수 외부에서 선언한 변수는 모두 전역 변수로 된다.
    변수 선언문 이전에 변수를 참조하면 언제나 undefined를 반환한다.
    
    1. 변수 중복 선언 불가
        (1) let
        let 키워드로는 변수 중복 선언이 불가하지만, 재할당은 가능하다.
        
        (2) const
        const가 let과 다른 점이 있다면, 반드시 선언과 초기화를 동시에 진행되어야 한다.

    2. 블록 레벨 스코프
        let, const 키워드로 선언한 변수는 모두 코드 블록(ex. 함수, if, for, while, try/catch 문 등)을 지역 스코프로 
        인정하는 블록 레벨 스코프를 따른다.
        위 var 키워드로 예를 들었던 것을 그대로 가져와 바꾸면 아래와 같은 결과가 나온다.

    3. 변수 호이스팅
        (1) let
        let 키워드로 선언한 변수는 선언 단계와 초기화 단계가 분리되어 진행된다. 
        즉, 런타임 이전에 자바스크립트 엔진에 의해 선언 단계가 먼저 실행되지만, 초기화 단계가 실행되지 않았을 때 
        해당 변수에 접근하려고 하면 참조 에러가 뜬다.
        따라서 let 키워드로 선언한 변수는 스코프의 시작 지점부터 초기화 단계 시작 지점까지 변수를 참조할 수 없는 
        일시적 사각지대(Temporal Dead Zone: TDZ) 구간에 존재한다.

        (2) const
        const 키워드는 선언 단계와 초기화 단계가 동시에 진행된다.  
        let 키워드로 선언한 경우, 런타임 이전에 선언이 되어 자바스크립트 엔진에 이미 존재하지만
        초기화가 되지 않았기 때문에 name is not defined라는 문구가 떴다. 
        하지만 const 키워드로 선언한 경우, 선언과 초기화가 동시에 이루어져야 하지만 런타임 이전에는 실행될 수 없다. 
        따라서 초기화가 진행되지 않은 상태이기 때문에 Cannot access 'name' before initialization 에러 문구가 뜬다.     


        RES !!!

        기본적으로 변수의 스코프는 최대한 좁게 만드는 것을 권장한다. 
        따라서, var 키워드 보다는 let과 const 키워드를 사용하며, 
        변경하지 않는 값(상수)이라면 let 보다는 const 키워드를 사용하는 것이 안전하다.
        
 */
